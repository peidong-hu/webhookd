package main

import (
	"fmt"
	"log"
	"encoding/json"
	"os"

	"github.com/streadway/amqp"
)

type Message struct {
	Version string `json:"version"`
	Repository string `json:"repository"`
	Branch string `json:"branch"`
	Commit string `json:"commit"`
	Message string `json:"message"`
	Author string `json:"author"`
	Trigger string `json:"trigger"`
}

type MQConfig struct {
	Type string `json:"type"`
	Protocol string `json:"protocol"`
	Host string `json:"host"`
	Port int `json:"port"`
	User string `json:"user"`
	Password string `json:"password"`
	Exchange string `json:"exchange"`
}

type Config struct {
	Address string `json:"address"`
	Port int `json:"port"`
	MQ MQConfig `json:"mq"`
}

func loadConfig(file string) (config Config, err error) {
	configFile, err := os.Open(file)
    defer configFile.Close()
    if err != nil {
        return config, err
    }

    jsonParser := json.NewDecoder(configFile)
	err = jsonParser.Decode(&config)
	if err != nil {
		return config, err
	}

    return config, nil
}

func main() {
	c, err := loadConfig("./webhookd.json")
	if err != nil {
		log.Fatalf("Failed to load config file: %s", err)
	}

	mqConnection := fmt.Sprintf("%s://%s:%s@%s:%d",
		c.MQ.Protocol, c.MQ.User, c.MQ.Password, c.MQ.Host, c.MQ.Port)

	conn, err := amqp.Dial(mqConnection)
	if err != nil {
		log.Fatalf("Failed to connect to RabbitMQ: %s", err)
	}
	defer conn.Close()

	ch, err := conn.Channel()
	if err != nil {
		log.Fatalf("Failed to open channel: %s", err)
	}
	defer ch.Close()

	/* ensure message exchange exists */
	err = ch.ExchangeDeclare(
		c.MQ.Exchange, // name
		"fanout", // type
		false,   // durable
		false,   // delete when unused
		false,   // exclusive
		false,   // no-wait
		nil,     // arguments
	)
	if err != nil {
		log.Fatalf("Failed to declare exchange %s: %s", c.MQ.Exchange, err)
	}

	/* ensure message queue exists */
	q, err := ch.QueueDeclare(
		"",    // name (empty means autogenerated by server)
		false, // durable
		false, // delete when usused
		true,  // exclusive
		false, // no-wait
		nil,   // arguments
	)
	if err != nil {
		log.Fatalf("Failed to declare queue: %s", err)
	}

	err = ch.QueueBind(
		q.Name, // queue name
		"",     // routing key
		c.MQ.Exchange, // exchange
		false,
		nil)
	if err != nil {
		log.Fatalf("Failed to bind queue: %s", err)
	}

	msgs, err := ch.Consume(
		q.Name, // queue
		"",     // consumer
		true,   // auto-ack
		false,  // exclusive
		false,  // no-local
		false,  // no-wait
		nil,    // args
	)
	if err != nil {
		log.Fatalf("Failed to register consumer: %s", err)
	}

	forever := make(chan bool)

	go func() {
		for d := range msgs {
			var m Message
			err := json.Unmarshal(d.Body, &m)
			if err != nil {
				log.Printf("%s: Failed to decode message: %s\n", err, d.Body)
				continue
			}

			log.Printf("Version: %s, Repo: %s, Branch: %s, Commit: %s, Author: %s, Trigger: %s, Message: %s",
				m.Version, m.Repository, m.Branch, m.Commit, m.Author, m.Trigger, m.Message)
		}
	}()

	log.Printf("Waiting for messages...")
	<-forever

}
